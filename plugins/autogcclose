import fs from 'fs';
import moment from 'moment-timezone';
import schedule from 'node-schedule';

const dbFile = './autoGC.json';
const timeZone = 'Africa/Casablanca';

// تعريف قاعدة بيانات الإغلاق التلقائي
global.autoGC = global.autoGC || {};

// تحميل البيانات من الملف إذا كان موجودًا
if (fs.existsSync(dbFile)) {
    global.autoGC = JSON.parse(fs.readFileSync(dbFile));
} else {
    fs.writeFileSync(dbFile, JSON.stringify({}, null, 2));
}

// وظيفة لحفظ البيانات في الملف
const saveDB = () => {
    try {
        fs.writeFileSync(dbFile, JSON.stringify(global.autoGC, null, 2));
        return true;
    } catch (err) {
        console.error('خطأ أثناء حفظ قاعدة البيانات:', err);
        return false;
    }
};

// وظيفة لفحص حالة المجموعات
const checkGroupsStatus = async () => {
    try {
        const currentTime = moment().tz(timeZone).format('HH:mm');
        for (const chatId in global.autoGC) {
            if (!global.autoGC[chatId]?.enabled) continue;
            const { closeTime, openTime, originalName, status } = global.autoGC[chatId];

            if (currentTime === closeTime && status !== 'closed') {
                try {
                    await conn.groupSettingUpdate(chatId, 'announcement');
                    await conn.groupUpdateSubject(chatId, `${originalName} (❌ مغلق)`);
                    await conn.sendMessage(chatId, { text: `🚫 * تم إغلاق المجموعة مؤقتًا دائما إقرؤا قوانين المجموعة حتى لا يتم طردكم* 🚫\n\nسيتم إعادة فتحها في *${openTime}*.` });
                    global.autoGC[chatId].status = 'closed';
                    saveDB();
                } catch (e) {
                    console.error(`خطأ أثناء إغلاق المجموعة ${chatId}:`, e);
                }
            }

            if (currentTime === openTime && status !== 'opened') {
                try {
                    await conn.groupSettingUpdate(chatId, 'not_announcement');
                    await conn.groupUpdateSubject(chatId, originalName);
                    await conn.sendMessage(chatId, { text: `✅ *تم إعادة فتح المجموعة استمتعوا بمميزات البوت و اقرؤوا قوانين المجموعة لأن نور الدين لا يتهاون مع من يخالفها* ✅\n\nوقت الإغلاق التالي: *${closeTime}*.` });
                    global.autoGC[chatId].status = 'opened';
                    saveDB();
                } catch (e) {
                    console.error(`خطأ أثناء فتح المجموعة ${chatId}:`, e);
                }
            }
        }
    } catch (err) {
        console.error('خطأ في checkGroupsStatus:', err);
    }
};

// جدولة الفحص كل دقيقة
if (!global.autoGCSchedule) {
    global.autoGCSchedule = schedule.scheduleJob('* * * * *', () => {
        checkGroupsStatus().catch(err => console.error('خطأ في الجدولة:', err));
    });
    console.log('تم تهيئة الجدولة التلقائية للمجموعات');
}

const handler = async (m, { conn, args }) => {
    const chatId = m.chat;
    if (!m.isGroup) return m.reply('❌ هذا الأمر يمكن استخدامه فقط في المجموعات!');

    let groupMetadata = conn.chats[chatId].metadata

    if (args[0]?.toLowerCase() === 'on') {
        global.autoGC[chatId] = {
            enabled: true,
            closeTime: global.autoGC[chatId]?.closeTime || '22:00',
            openTime: global.autoGC[chatId]?.openTime || '10:00',
            originalName: groupMetadata.subject,
            status: 'opened'
        };
        return saveDB()
            ? m.reply(`✅ تم *تفعيل* الإغلاق/الفتح التلقائي.\n\n📌 الإغلاق: ${global.autoGC[chatId].closeTime}\n📌 الفتح: ${global.autoGC[chatId].openTime}`)
            : m.reply('❌ فشل في حفظ الإعدادات.');
    }

    if (args[0]?.toLowerCase() === 'off') {
        if (!global.autoGC[chatId]?.enabled) return m.reply('⚠️ الإغلاق/الفتح التلقائي مُعطل بالفعل.');
        delete global.autoGC[chatId];
        return saveDB() ? m.reply('❌ تم *إلغاء* تفعيل الإغلاق/الفتح التلقائي.') : m.reply('❌ فشل في حفظ الإعدادات.');
    }

    if (args[0]?.toLowerCase() === 'set' && args[1] && args[2]) {
        if (!/^([01]\d|2[0-3]):([0-5]\d)$/.test(args[1]) || !/^([01]\d|2[0-3]):([0-5]\d)$/.test(args[2])) {
            return m.reply('⚠️ تنسيق الوقت غير صحيح! استخدم HH:MM بنظام 24 ساعة.');
        }
        global.autoGC[chatId] = {
            enabled: true,
            closeTime: args[1],
            openTime: args[2],
            originalName: groupMetadata.subject,
            status: 'opened'
        };
        return saveDB()
            ? m.reply(`✅ تم تحديث الجدولة.\n📌 الإغلاق: ${args[1]}\n📌 الفتح: ${args[2]}`)
            : m.reply('❌ فشل في حفظ الإعدادات.');
    }

    if (args[0]?.toLowerCase() === 'status') {
        if (!global.autoGC[chatId]) return m.reply('⚠️ الإغلاق/الفتح التلقائي غير مفعل.');
        const { enabled, closeTime, openTime, status } = global.autoGC[chatId];
        return m.reply(`📊 *حالة التحكم التلقائي بالمجموعة*\n\n` +
            `الحالة: ${enabled ? '✅ مفعل' : '❌ معطل'}\n` +
            `حالة المجموعة: ${status === 'closed' ? '🔒 مغلقة' : '🔓 مفتوحة'}\n` +
            `الإغلاق: ${closeTime}\nالفتح: ${openTime}`);
    }

    return m.reply('⚠️ تنسيق غير صحيح! استخدم:\n- auto on\n- auto off\n- auto set HH:MM HH:MM\n- auto status');
};

handler.command = ['auto'];
handler.owner = true
handler.botAdmin = true
handler.admin = true

export default handler;
